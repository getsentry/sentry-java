public final class io/sentry/spring/BuildConfig {
	public static final field SENTRY_SPRING_SDK_NAME Ljava/lang/String;
	public static final field VERSION_NAME Ljava/lang/String;
}

public abstract interface annotation class io/sentry/spring/EnableSentry : java/lang/annotation/Annotation {
	public abstract fun dsn ()Ljava/lang/String;
	public abstract fun exceptionResolverOrder ()I
	public abstract fun maxRequestBodySize ()Lio/sentry/SentryOptions$RequestSize;
	public abstract fun sendDefaultPii ()Z
}

public final class io/sentry/spring/HttpServletRequestSentryUserProvider : io/sentry/spring/SentryUserProvider {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun provideUser ()Lio/sentry/protocol/User;
}

public class io/sentry/spring/SentryExceptionResolver : org/springframework/core/Ordered, org/springframework/web/servlet/HandlerExceptionResolver {
	public static final field MECHANISM_TYPE Ljava/lang/String;
	public fun <init> (Lio/sentry/IHub;I)V
	public fun getOrder ()I
	public fun resolveException (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/lang/Object;Ljava/lang/Exception;)Lorg/springframework/web/servlet/ModelAndView;
}

public class io/sentry/spring/SentryHubRegistrar : org/springframework/context/annotation/ImportBeanDefinitionRegistrar {
	public fun <init> ()V
	public fun registerBeanDefinitions (Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
}

public class io/sentry/spring/SentryInitBeanPostProcessor : org/springframework/beans/factory/config/BeanPostProcessor, org/springframework/context/ApplicationContextAware {
	public fun <init> ()V
	public fun postProcessAfterInitialization (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
	public fun setApplicationContext (Lorg/springframework/context/ApplicationContext;)V
}

public class io/sentry/spring/SentryRequestHttpServletRequestProcessor : io/sentry/EventProcessor {
	public fun <init> (Ljavax/servlet/http/HttpServletRequest;)V
	public fun process (Lio/sentry/SentryEvent;Ljava/lang/Object;)Lio/sentry/SentryEvent;
}

public class io/sentry/spring/SentryRequestResolver {
	public fun <init> (Lio/sentry/IHub;)V
	public fun resolveSentryRequest (Ljavax/servlet/http/HttpServletRequest;)Lio/sentry/protocol/Request;
}

public class io/sentry/spring/SentrySpringFilter : org/springframework/web/filter/OncePerRequestFilter {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/SentryRequestResolver;)V
	protected fun doFilterInternal (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
}

public class io/sentry/spring/SentrySpringRequestListener : javax/servlet/ServletRequestListener, org/springframework/core/Ordered {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/SentryRequestResolver;)V
	public fun getOrder ()I
	public fun requestDestroyed (Ljavax/servlet/ServletRequestEvent;)V
	public fun requestInitialized (Ljavax/servlet/ServletRequestEvent;)V
}

public class io/sentry/spring/SentrySpringServletContainerInitializer : javax/servlet/ServletContainerInitializer {
	public fun <init> ()V
	public fun onStartup (Ljava/util/Set;Ljavax/servlet/ServletContext;)V
}

public class io/sentry/spring/SentryUserFilter : javax/servlet/Filter {
	public fun <init> (Lio/sentry/IHub;Ljava/util/List;)V
	public fun doFilter (Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;Ljavax/servlet/FilterChain;)V
	public fun getSentryUserProviders ()Ljava/util/List;
}

public abstract interface class io/sentry/spring/SentryUserProvider {
	public abstract fun provideUser ()Lio/sentry/protocol/User;
}

public final class io/sentry/spring/SentryUserProviderEventProcessor : io/sentry/EventProcessor {
	public fun <init> (Lio/sentry/SentryOptions;Lio/sentry/spring/SentryUserProvider;)V
	public fun getSentryUserProvider ()Lio/sentry/spring/SentryUserProvider;
	public fun process (Lio/sentry/SentryEvent;Ljava/lang/Object;)Lio/sentry/SentryEvent;
	public fun process (Lio/sentry/protocol/SentryTransaction;Ljava/lang/Object;)Lio/sentry/protocol/SentryTransaction;
}

public class io/sentry/spring/SentryWebConfiguration {
	public fun <init> ()V
	public fun httpServletRequestSentryUserProvider (Lio/sentry/SentryOptions;)Lio/sentry/spring/HttpServletRequestSentryUserProvider;
}

public final class io/sentry/spring/SpringSecuritySentryUserProvider : io/sentry/spring/SentryUserProvider {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun provideUser ()Lio/sentry/protocol/User;
}

public class io/sentry/spring/tracing/SentryAdviceConfiguration {
	public fun <init> ()V
	public fun sentrySpanAdvice (Lio/sentry/IHub;)Lorg/aopalliance/aop/Advice;
	public fun sentrySpanAdvisor (Lorg/springframework/aop/Pointcut;Lorg/aopalliance/aop/Advice;)Lorg/springframework/aop/Advisor;
	public fun sentryTransactionAdvice (Lio/sentry/IHub;)Lorg/aopalliance/aop/Advice;
	public fun sentryTransactionAdvisor (Lorg/springframework/aop/Pointcut;Lorg/aopalliance/aop/Advice;)Lorg/springframework/aop/Advisor;
}

public abstract interface annotation class io/sentry/spring/tracing/SentrySpan : java/lang/annotation/Annotation {
	public abstract fun description ()Ljava/lang/String;
	public abstract fun operation ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/tracing/SentrySpanAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public class io/sentry/spring/tracing/SentrySpanClientHttpRequestInterceptor : org/springframework/http/client/ClientHttpRequestInterceptor {
	public fun <init> (Lio/sentry/IHub;)V
	public fun intercept (Lorg/springframework/http/HttpRequest;[BLorg/springframework/http/client/ClientHttpRequestExecution;)Lorg/springframework/http/client/ClientHttpResponse;
}

public class io/sentry/spring/tracing/SentrySpanPointcutConfiguration {
	public fun <init> ()V
	public fun sentrySpanPointcut ()Lorg/springframework/aop/Pointcut;
}

public class io/sentry/spring/tracing/SentryTracingConfiguration {
	public fun <init> ()V
}

public class io/sentry/spring/tracing/SentryTracingFilter : org/springframework/web/filter/OncePerRequestFilter {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/tracing/TransactionNameProvider;)V
	protected fun doFilterInternal (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
}

public abstract interface annotation class io/sentry/spring/tracing/SentryTransaction : java/lang/annotation/Annotation {
	public abstract fun name ()Ljava/lang/String;
	public abstract fun operation ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/tracing/SentryTransactionAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public class io/sentry/spring/tracing/SentryTransactionPointcutConfiguration {
	public fun <init> ()V
	public fun sentryTransactionPointcut ()Lorg/springframework/aop/Pointcut;
}

public final class io/sentry/spring/tracing/TransactionNameProvider {
	public fun <init> ()V
	public fun provideTransactionName (Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;
}

public class io/sentry/spring/webflux/SentryRequestResolver {
	public fun <init> (Lio/sentry/IHub;)V
	public fun resolveSentryRequest (Lorg/springframework/http/server/reactive/ServerHttpRequest;)Lio/sentry/protocol/Request;
}

public final class io/sentry/spring/webflux/SentryScheduleHook : java/util/function/Function {
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)Ljava/lang/Object;
	public fun apply (Ljava/lang/Runnable;)Ljava/lang/Runnable;
}

public final class io/sentry/spring/webflux/SentryWebExceptionHandler : org/springframework/web/server/WebExceptionHandler {
	public fun <init> (Lio/sentry/IHub;)V
	public fun handle (Lorg/springframework/web/server/ServerWebExchange;Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
}

public final class io/sentry/spring/webflux/SentryWebFilter : org/springframework/web/server/WebFilter {
	public fun <init> (Lio/sentry/IHub;)V
	public fun filter (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebFilterChain;)Lreactor/core/publisher/Mono;
}

