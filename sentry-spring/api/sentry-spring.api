public final class io/sentry/spring/BuildConfig {
	public static final field SENTRY_SPRING_SDK_NAME Ljava/lang/String;
	public static final field VERSION_NAME Ljava/lang/String;
}

public final class io/sentry/spring/ContextTagsEventProcessor : io/sentry/EventProcessor {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun process (Lio/sentry/SentryEvent;Lio/sentry/Hint;)Lio/sentry/SentryEvent;
}

public abstract interface annotation class io/sentry/spring/EnableSentry : java/lang/annotation/Annotation {
	public abstract fun dsn ()Ljava/lang/String;
	public abstract fun exceptionResolverOrder ()I
	public abstract fun maxRequestBodySize ()Lio/sentry/SentryOptions$RequestSize;
	public abstract fun sendDefaultPii ()Z
}

public final class io/sentry/spring/HttpServletRequestSentryUserProvider : io/sentry/spring/SentryUserProvider {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun provideUser ()Lio/sentry/protocol/User;
}

public class io/sentry/spring/SentryExceptionResolver : org/springframework/core/Ordered, org/springframework/web/servlet/HandlerExceptionResolver {
	public static final field MECHANISM_TYPE Ljava/lang/String;
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/tracing/TransactionNameProvider;I)V
	protected fun createEvent (Ljavax/servlet/http/HttpServletRequest;Ljava/lang/Exception;)Lio/sentry/SentryEvent;
	protected fun createHint (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Lio/sentry/Hint;
	public fun getOrder ()I
	public fun resolveException (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/lang/Object;Ljava/lang/Exception;)Lorg/springframework/web/servlet/ModelAndView;
}

public class io/sentry/spring/SentryHubRegistrar : org/springframework/context/annotation/ImportBeanDefinitionRegistrar {
	public fun <init> ()V
	public fun registerBeanDefinitions (Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
}

public class io/sentry/spring/SentryInitBeanPostProcessor : org/springframework/beans/factory/DisposableBean, org/springframework/beans/factory/config/BeanPostProcessor, org/springframework/context/ApplicationContextAware {
	public fun <init> ()V
	public fun destroy ()V
	public fun postProcessAfterInitialization (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
	public fun setApplicationContext (Lorg/springframework/context/ApplicationContext;)V
}

public class io/sentry/spring/SentryRequestHttpServletRequestProcessor : io/sentry/EventProcessor {
	public fun <init> (Lio/sentry/spring/tracing/TransactionNameProvider;Ljavax/servlet/http/HttpServletRequest;)V
	public fun process (Lio/sentry/SentryEvent;Lio/sentry/Hint;)Lio/sentry/SentryEvent;
}

public class io/sentry/spring/SentryRequestResolver {
	public fun <init> (Lio/sentry/IHub;)V
	public fun resolveSentryRequest (Ljavax/servlet/http/HttpServletRequest;)Lio/sentry/protocol/Request;
}

public class io/sentry/spring/SentrySpringFilter : org/springframework/web/filter/OncePerRequestFilter {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/SentryRequestResolver;Lio/sentry/spring/tracing/TransactionNameProvider;)V
	protected fun doFilterInternal (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
}

public class io/sentry/spring/SentrySpringServletContainerInitializer : javax/servlet/ServletContainerInitializer {
	public fun <init> ()V
	public fun onStartup (Ljava/util/Set;Ljavax/servlet/ServletContext;)V
}

public final class io/sentry/spring/SentryTaskDecorator : org/springframework/core/task/TaskDecorator {
	public fun <init> ()V
	public fun decorate (Ljava/lang/Runnable;)Ljava/lang/Runnable;
}

public class io/sentry/spring/SentryUserFilter : org/springframework/web/filter/OncePerRequestFilter {
	public fun <init> (Lio/sentry/IHub;Ljava/util/List;)V
	protected fun doFilterInternal (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
	public fun getSentryUserProviders ()Ljava/util/List;
}

public abstract interface class io/sentry/spring/SentryUserProvider {
	public abstract fun provideUser ()Lio/sentry/protocol/User;
}

public class io/sentry/spring/SentryWebConfiguration {
	public fun <init> ()V
	public fun httpServletRequestSentryUserProvider (Lio/sentry/SentryOptions;)Lio/sentry/spring/HttpServletRequestSentryUserProvider;
}

public final class io/sentry/spring/SpringSecuritySentryUserProvider : io/sentry/spring/SentryUserProvider {
	public fun <init> (Lio/sentry/SentryOptions;)V
	public fun provideUser ()Lio/sentry/protocol/User;
}

public abstract interface annotation class io/sentry/spring/checkin/SentryCheckIn : java/lang/annotation/Annotation {
	public abstract fun heartbeat ()Z
	public abstract fun monitorSlug ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/checkin/SentryCheckInAdvice : org/aopalliance/intercept/MethodInterceptor, org/springframework/context/EmbeddedValueResolverAware {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
	public fun setEmbeddedValueResolver (Lorg/springframework/util/StringValueResolver;)V
}

public class io/sentry/spring/checkin/SentryCheckInAdviceConfiguration {
	public fun <init> ()V
	public fun sentryCheckInAdvice ()Lorg/aopalliance/aop/Advice;
	public fun sentryCheckInAdvisor (Lorg/springframework/aop/Pointcut;Lorg/aopalliance/aop/Advice;)Lorg/springframework/aop/Advisor;
}

public class io/sentry/spring/checkin/SentryCheckInPointcutConfiguration {
	public fun <init> ()V
	public fun sentryCheckInPointcut ()Lorg/springframework/aop/Pointcut;
}

public class io/sentry/spring/checkin/SentryQuartzConfiguration {
	public fun <init> ()V
	public fun schedulerFactoryBeanCustomizer ()Lorg/springframework/boot/autoconfigure/quartz/SchedulerFactoryBeanCustomizer;
}

public final class io/sentry/spring/checkin/SentrySchedulerFactoryBeanCustomizer : org/springframework/boot/autoconfigure/quartz/SchedulerFactoryBeanCustomizer {
	public fun <init> ()V
	public fun customize (Lorg/springframework/scheduling/quartz/SchedulerFactoryBean;)V
}

public abstract interface annotation class io/sentry/spring/exception/SentryCaptureExceptionParameter : java/lang/annotation/Annotation {
}

public class io/sentry/spring/exception/SentryCaptureExceptionParameterAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public class io/sentry/spring/exception/SentryCaptureExceptionParameterConfiguration {
	public fun <init> ()V
}

public class io/sentry/spring/exception/SentryCaptureExceptionParameterPointcutConfiguration {
	public fun <init> ()V
	public fun sentryCaptureExceptionParameterPointcut ()Lorg/springframework/aop/Pointcut;
}

public class io/sentry/spring/exception/SentryExceptionParameterAdviceConfiguration {
	public fun <init> ()V
	public fun sentryCaptureExceptionParameterAdvice ()Lorg/aopalliance/aop/Advice;
	public fun sentryCaptureExceptionParameterAdvisor (Lorg/springframework/aop/Pointcut;Lorg/aopalliance/aop/Advice;)Lorg/springframework/aop/Advisor;
}

public final class io/sentry/spring/graphql/SentryBatchLoaderRegistry : org/springframework/graphql/execution/BatchLoaderRegistry {
	public fun forName (Ljava/lang/String;)Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;
	public fun forTypePair (Ljava/lang/Class;Ljava/lang/Class;)Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;
	public fun registerDataLoaders (Lorg/dataloader/DataLoaderRegistry;Lgraphql/GraphQLContext;)V
}

public final class io/sentry/spring/graphql/SentryBatchLoaderRegistry$SentryRegistrationSpec : org/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec {
	public fun <init> (Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;Ljava/lang/Class;Ljava/lang/Class;)V
	public fun <init> (Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;Ljava/lang/String;)V
	public fun registerBatchLoader (Ljava/util/function/BiFunction;)V
	public fun registerMappedBatchLoader (Ljava/util/function/BiFunction;)V
	public fun withName (Ljava/lang/String;)Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;
	public fun withOptions (Ljava/util/function/Consumer;)Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;
	public fun withOptions (Lorg/dataloader/DataLoaderOptions;)Lorg/springframework/graphql/execution/BatchLoaderRegistry$RegistrationSpec;
}

public final class io/sentry/spring/graphql/SentryDataFetcherExceptionResolverAdapter : org/springframework/graphql/execution/DataFetcherExceptionResolverAdapter {
	public fun <init> ()V
	public fun isThreadLocalContextAware ()Z
}

public final class io/sentry/spring/graphql/SentryDgsSubscriptionHandler : io/sentry/graphql/SentrySubscriptionHandler {
	public fun <init> ()V
	public fun onSubscriptionResult (Ljava/lang/Object;Lio/sentry/IHub;Lio/sentry/graphql/ExceptionReporter;Lgraphql/execution/instrumentation/parameters/InstrumentationFieldFetchParameters;)Ljava/lang/Object;
}

public final class io/sentry/spring/graphql/SentryGraphqlBeanPostProcessor : org/springframework/beans/factory/config/BeanPostProcessor, org/springframework/core/PriorityOrdered {
	public fun <init> ()V
	public fun getOrder ()I
	public fun postProcessAfterInitialization (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
}

public class io/sentry/spring/graphql/SentryGraphqlConfiguration {
	public fun <init> ()V
	public fun exceptionResolverAdapter ()Lio/sentry/spring/graphql/SentryDataFetcherExceptionResolverAdapter;
	public fun graphqlBeanPostProcessor ()Lio/sentry/spring/graphql/SentryGraphqlBeanPostProcessor;
	public fun sourceBuilderCustomizerWebflux ()Lorg/springframework/boot/autoconfigure/graphql/GraphQlSourceBuilderCustomizer;
	public fun sourceBuilderCustomizerWebmvc ()Lorg/springframework/boot/autoconfigure/graphql/GraphQlSourceBuilderCustomizer;
}

public final class io/sentry/spring/graphql/SentrySpringSubscriptionHandler : io/sentry/graphql/SentrySubscriptionHandler {
	public fun <init> ()V
	public fun onSubscriptionResult (Ljava/lang/Object;Lio/sentry/IHub;Lio/sentry/graphql/ExceptionReporter;Lgraphql/execution/instrumentation/parameters/InstrumentationFieldFetchParameters;)Ljava/lang/Object;
}

public class io/sentry/spring/tracing/SentryAdviceConfiguration {
	public fun <init> ()V
	public fun sentrySpanAdvice ()Lorg/aopalliance/aop/Advice;
	public fun sentrySpanAdvisor (Lorg/springframework/aop/Pointcut;Lorg/aopalliance/aop/Advice;)Lorg/springframework/aop/Advisor;
	public fun sentryTransactionAdvice ()Lorg/aopalliance/aop/Advice;
	public fun sentryTransactionAdvisor (Lorg/springframework/aop/Pointcut;Lorg/aopalliance/aop/Advice;)Lorg/springframework/aop/Advisor;
}

public abstract interface annotation class io/sentry/spring/tracing/SentrySpan : java/lang/annotation/Annotation {
	public abstract fun description ()Ljava/lang/String;
	public abstract fun operation ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/tracing/SentrySpanAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public class io/sentry/spring/tracing/SentrySpanClientHttpRequestInterceptor : org/springframework/http/client/ClientHttpRequestInterceptor {
	public fun <init> (Lio/sentry/IHub;)V
	public fun intercept (Lorg/springframework/http/HttpRequest;[BLorg/springframework/http/client/ClientHttpRequestExecution;)Lorg/springframework/http/client/ClientHttpResponse;
}

public class io/sentry/spring/tracing/SentrySpanClientWebRequestFilter : org/springframework/web/reactive/function/client/ExchangeFilterFunction {
	public fun <init> (Lio/sentry/IHub;)V
	public fun filter (Lorg/springframework/web/reactive/function/client/ClientRequest;Lorg/springframework/web/reactive/function/client/ExchangeFunction;)Lreactor/core/publisher/Mono;
}

public class io/sentry/spring/tracing/SentrySpanPointcutConfiguration {
	public fun <init> ()V
	public fun sentrySpanPointcut ()Lorg/springframework/aop/Pointcut;
}

public class io/sentry/spring/tracing/SentryTracingConfiguration {
	public fun <init> ()V
}

public class io/sentry/spring/tracing/SentryTracingFilter : org/springframework/web/filter/OncePerRequestFilter {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun <init> (Lio/sentry/IHub;Lio/sentry/spring/tracing/TransactionNameProvider;)V
	protected fun doFilterInternal (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/FilterChain;)V
}

public abstract interface annotation class io/sentry/spring/tracing/SentryTransaction : java/lang/annotation/Annotation {
	public abstract fun name ()Ljava/lang/String;
	public abstract fun operation ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public class io/sentry/spring/tracing/SentryTransactionAdvice : org/aopalliance/intercept/MethodInterceptor {
	public fun <init> ()V
	public fun <init> (Lio/sentry/IHub;)V
	public fun invoke (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
}

public class io/sentry/spring/tracing/SentryTransactionPointcutConfiguration {
	public fun <init> ()V
	public fun sentryTransactionPointcut ()Lorg/springframework/aop/Pointcut;
}

public final class io/sentry/spring/tracing/SpringMvcTransactionNameProvider : io/sentry/spring/tracing/TransactionNameProvider {
	public fun <init> ()V
	public fun provideTransactionName (Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;
	public fun provideTransactionSource ()Lio/sentry/protocol/TransactionNameSource;
}

public abstract interface class io/sentry/spring/tracing/TransactionNameProvider {
	public abstract fun provideTransactionName (Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;
	public fun provideTransactionSource ()Lio/sentry/protocol/TransactionNameSource;
}

public class io/sentry/spring/webflux/SentryRequestResolver {
	public fun <init> (Lio/sentry/IHub;)V
	public fun resolveSentryRequest (Lorg/springframework/http/server/reactive/ServerHttpRequest;)Lio/sentry/protocol/Request;
}

public final class io/sentry/spring/webflux/SentryScheduleHook : java/util/function/Function {
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)Ljava/lang/Object;
	public fun apply (Ljava/lang/Runnable;)Ljava/lang/Runnable;
}

public final class io/sentry/spring/webflux/SentryWebExceptionHandler : org/springframework/web/server/WebExceptionHandler {
	public static final field MECHANISM_TYPE Ljava/lang/String;
	public fun <init> (Lio/sentry/IHub;)V
	public fun handle (Lorg/springframework/web/server/ServerWebExchange;Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
}

public final class io/sentry/spring/webflux/SentryWebFilter : org/springframework/web/server/WebFilter {
	public static final field SENTRY_HUB_KEY Ljava/lang/String;
	public fun <init> (Lio/sentry/IHub;)V
	public fun filter (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebFilterChain;)Lreactor/core/publisher/Mono;
}

