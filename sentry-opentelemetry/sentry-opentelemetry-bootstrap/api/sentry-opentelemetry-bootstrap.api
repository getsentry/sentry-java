public abstract interface class io/sentry/opentelemetry/IOtelSpanWrapper : io/sentry/ISpan {
	public abstract fun getData ()Ljava/util/Map;
	public abstract fun getMeasurements ()Ljava/util/Map;
	public abstract fun getScopes ()Lio/sentry/IScopes;
	public abstract fun getTags ()Ljava/util/Map;
	public abstract fun getTraceId ()Lio/sentry/protocol/SentryId;
	public abstract fun getTransactionName ()Ljava/lang/String;
	public abstract fun getTransactionNameSource ()Lio/sentry/protocol/TransactionNameSource;
	public abstract fun isProfileSampled ()Ljava/lang/Boolean;
	public abstract fun setTransactionName (Ljava/lang/String;)V
	public abstract fun setTransactionName (Ljava/lang/String;Lio/sentry/protocol/TransactionNameSource;)V
	public abstract fun storeInContext (Lio/opentelemetry/context/Context;)Lio/opentelemetry/context/Context;
}

public final class io/sentry/opentelemetry/InternalSemanticAttributes {
	public static final field BAGGAGE Lio/opentelemetry/api/common/AttributeKey;
	public static final field BAGGAGE_MUTABLE Lio/opentelemetry/api/common/AttributeKey;
	public static final field IS_REMOTE_PARENT Lio/opentelemetry/api/common/AttributeKey;
	public static final field PARENT_SAMPLED Lio/opentelemetry/api/common/AttributeKey;
	public static final field PROFILE_SAMPLED Lio/opentelemetry/api/common/AttributeKey;
	public static final field PROFILE_SAMPLE_RATE Lio/opentelemetry/api/common/AttributeKey;
	public static final field SAMPLED Lio/opentelemetry/api/common/AttributeKey;
	public static final field SAMPLE_RATE Lio/opentelemetry/api/common/AttributeKey;
	public fun <init> ()V
}

public final class io/sentry/opentelemetry/OtelContextScopesStorage : io/sentry/IScopesStorage {
	public fun <init> ()V
	public fun close ()V
	public fun get ()Lio/sentry/IScopes;
	public fun init ()V
	public fun set (Lio/sentry/IScopes;)Lio/sentry/ISentryLifecycleToken;
}

public final class io/sentry/opentelemetry/OtelSpanFactory : io/sentry/ISpanFactory {
	public fun <init> ()V
	public fun <init> (Lio/opentelemetry/api/OpenTelemetry;)V
	public fun createSpan (Lio/sentry/IScopes;Lio/sentry/SpanOptions;Lio/sentry/SpanContext;Lio/sentry/ISpan;)Lio/sentry/ISpan;
	public fun createTransaction (Lio/sentry/TransactionContext;Lio/sentry/IScopes;Lio/sentry/TransactionOptions;Lio/sentry/TransactionPerformanceCollector;)Lio/sentry/ITransaction;
}

public final class io/sentry/opentelemetry/OtelStrongRefSpanWrapper : io/sentry/opentelemetry/IOtelSpanWrapper {
	public fun <init> (Lio/opentelemetry/api/trace/Span;Lio/sentry/opentelemetry/IOtelSpanWrapper;)V
	public fun finish ()V
	public fun finish (Lio/sentry/SpanStatus;)V
	public fun finish (Lio/sentry/SpanStatus;Lio/sentry/SentryDate;)V
	public fun getContexts ()Lio/sentry/protocol/Contexts;
	public fun getData ()Ljava/util/Map;
	public fun getData (Ljava/lang/String;)Ljava/lang/Object;
	public fun getDescription ()Ljava/lang/String;
	public fun getFinishDate ()Lio/sentry/SentryDate;
	public fun getMeasurements ()Ljava/util/Map;
	public fun getOperation ()Ljava/lang/String;
	public fun getSamplingDecision ()Lio/sentry/TracesSamplingDecision;
	public fun getScopes ()Lio/sentry/IScopes;
	public fun getSpanContext ()Lio/sentry/SpanContext;
	public fun getStartDate ()Lio/sentry/SentryDate;
	public fun getStatus ()Lio/sentry/SpanStatus;
	public fun getTag (Ljava/lang/String;)Ljava/lang/String;
	public fun getTags ()Ljava/util/Map;
	public fun getThrowable ()Ljava/lang/Throwable;
	public fun getTraceId ()Lio/sentry/protocol/SentryId;
	public fun getTransactionName ()Ljava/lang/String;
	public fun getTransactionNameSource ()Lio/sentry/protocol/TransactionNameSource;
	public fun isFinished ()Z
	public fun isNoOp ()Z
	public fun isProfileSampled ()Ljava/lang/Boolean;
	public fun isSampled ()Ljava/lang/Boolean;
	public fun makeCurrent ()Lio/sentry/ISentryLifecycleToken;
	public fun setContext (Ljava/lang/String;Ljava/lang/Object;)V
	public fun setData (Ljava/lang/String;Ljava/lang/Object;)V
	public fun setDescription (Ljava/lang/String;)V
	public fun setMeasurement (Ljava/lang/String;Ljava/lang/Number;)V
	public fun setMeasurement (Ljava/lang/String;Ljava/lang/Number;Lio/sentry/MeasurementUnit;)V
	public fun setOperation (Ljava/lang/String;)V
	public fun setStatus (Lio/sentry/SpanStatus;)V
	public fun setTag (Ljava/lang/String;Ljava/lang/String;)V
	public fun setThrowable (Ljava/lang/Throwable;)V
	public fun setTransactionName (Ljava/lang/String;)V
	public fun setTransactionName (Ljava/lang/String;Lio/sentry/protocol/TransactionNameSource;)V
	public fun startChild (Lio/sentry/SpanContext;Lio/sentry/SpanOptions;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SentryDate;Lio/sentry/Instrumenter;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SentryDate;Lio/sentry/Instrumenter;Lio/sentry/SpanOptions;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SpanOptions;)Lio/sentry/ISpan;
	public fun storeInContext (Lio/opentelemetry/context/Context;)Lio/opentelemetry/context/Context;
	public fun toBaggageHeader (Ljava/util/List;)Lio/sentry/BaggageHeader;
	public fun toSentryTrace ()Lio/sentry/SentryTraceHeader;
	public fun traceContext ()Lio/sentry/TraceContext;
	public fun updateEndDate (Lio/sentry/SentryDate;)Z
}

public final class io/sentry/opentelemetry/OtelTransactionSpanForwarder : io/sentry/ITransaction {
	public fun <init> (Lio/sentry/opentelemetry/IOtelSpanWrapper;)V
	public fun finish ()V
	public fun finish (Lio/sentry/SpanStatus;)V
	public fun finish (Lio/sentry/SpanStatus;Lio/sentry/SentryDate;)V
	public fun finish (Lio/sentry/SpanStatus;Lio/sentry/SentryDate;ZLio/sentry/Hint;)V
	public fun forceFinish (Lio/sentry/SpanStatus;ZLio/sentry/Hint;)V
	public fun getContexts ()Lio/sentry/protocol/Contexts;
	public fun getData (Ljava/lang/String;)Ljava/lang/Object;
	public fun getDescription ()Ljava/lang/String;
	public fun getEventId ()Lio/sentry/protocol/SentryId;
	public fun getFinishDate ()Lio/sentry/SentryDate;
	public fun getLatestActiveSpan ()Lio/sentry/ISpan;
	public fun getName ()Ljava/lang/String;
	public fun getOperation ()Ljava/lang/String;
	public fun getSamplingDecision ()Lio/sentry/TracesSamplingDecision;
	public fun getSpanContext ()Lio/sentry/SpanContext;
	public fun getSpans ()Ljava/util/List;
	public fun getStartDate ()Lio/sentry/SentryDate;
	public fun getStatus ()Lio/sentry/SpanStatus;
	public fun getTag (Ljava/lang/String;)Ljava/lang/String;
	public fun getThrowable ()Ljava/lang/Throwable;
	public fun getTransactionNameSource ()Lio/sentry/protocol/TransactionNameSource;
	public fun isFinished ()Z
	public fun isNoOp ()Z
	public fun isProfileSampled ()Ljava/lang/Boolean;
	public fun isSampled ()Ljava/lang/Boolean;
	public fun makeCurrent ()Lio/sentry/ISentryLifecycleToken;
	public fun scheduleFinish ()V
	public fun setContext (Ljava/lang/String;Ljava/lang/Object;)V
	public fun setData (Ljava/lang/String;Ljava/lang/Object;)V
	public fun setDescription (Ljava/lang/String;)V
	public fun setMeasurement (Ljava/lang/String;Ljava/lang/Number;)V
	public fun setMeasurement (Ljava/lang/String;Ljava/lang/Number;Lio/sentry/MeasurementUnit;)V
	public fun setName (Ljava/lang/String;)V
	public fun setName (Ljava/lang/String;Lio/sentry/protocol/TransactionNameSource;)V
	public fun setOperation (Ljava/lang/String;)V
	public fun setStatus (Lio/sentry/SpanStatus;)V
	public fun setTag (Ljava/lang/String;Ljava/lang/String;)V
	public fun setThrowable (Ljava/lang/Throwable;)V
	public fun startChild (Lio/sentry/SpanContext;Lio/sentry/SpanOptions;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SentryDate;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SentryDate;Lio/sentry/Instrumenter;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SentryDate;Lio/sentry/Instrumenter;Lio/sentry/SpanOptions;)Lio/sentry/ISpan;
	public fun startChild (Ljava/lang/String;Ljava/lang/String;Lio/sentry/SpanOptions;)Lio/sentry/ISpan;
	public fun toBaggageHeader (Ljava/util/List;)Lio/sentry/BaggageHeader;
	public fun toSentryTrace ()Lio/sentry/SentryTraceHeader;
	public fun traceContext ()Lio/sentry/TraceContext;
	public fun updateEndDate (Lio/sentry/SentryDate;)Z
}

public final class io/sentry/opentelemetry/SentryContextStorage : io/opentelemetry/context/ContextStorage {
	public fun <init> (Lio/opentelemetry/context/ContextStorage;)V
	public fun attach (Lio/opentelemetry/context/Context;)Lio/opentelemetry/context/Scope;
	public fun current ()Lio/opentelemetry/context/Context;
}

public final class io/sentry/opentelemetry/SentryContextStorageProvider : io/opentelemetry/context/ContextStorageProvider {
	public fun <init> ()V
	public fun get ()Lio/opentelemetry/context/ContextStorage;
}

public final class io/sentry/opentelemetry/SentryContextWrapper : io/opentelemetry/context/Context {
	public fun get (Lio/opentelemetry/context/ContextKey;)Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
	public fun with (Lio/opentelemetry/context/ContextKey;Ljava/lang/Object;)Lio/opentelemetry/context/Context;
	public static fun wrap (Lio/opentelemetry/context/Context;)Lio/sentry/opentelemetry/SentryContextWrapper;
}

public final class io/sentry/opentelemetry/SentryOtelKeys {
	public static final field SENTRY_BAGGAGE_KEY Lio/opentelemetry/context/ContextKey;
	public static final field SENTRY_SCOPES_KEY Lio/opentelemetry/context/ContextKey;
	public static final field SENTRY_TRACE_KEY Lio/opentelemetry/context/ContextKey;
	public fun <init> ()V
}

public final class io/sentry/opentelemetry/SentryOtelThreadLocalStorage : io/opentelemetry/context/ContextStorage {
	public fun <init> ()V
	public fun attach (Lio/opentelemetry/context/Context;)Lio/opentelemetry/context/Scope;
	public fun current ()Lio/opentelemetry/context/Context;
}

public final class io/sentry/opentelemetry/SentryWeakSpanStorage {
	public static fun getInstance ()Lio/sentry/opentelemetry/SentryWeakSpanStorage;
	public fun getSentrySpan (Lio/opentelemetry/api/trace/SpanContext;)Lio/sentry/opentelemetry/IOtelSpanWrapper;
	public fun storeSentrySpan (Lio/opentelemetry/api/trace/SpanContext;Lio/sentry/opentelemetry/IOtelSpanWrapper;)V
}

