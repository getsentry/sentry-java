memberSearchIndex = [{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"addChild(SpanNode)","u":"addChild(io.sentry.opentelemetry.SpanNode)"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"addChildren(List<SpanNode>)","u":"addChildren(java.util.List)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanExporter","l":"export(Collection<SpanData>)","u":"export(java.util.Collection)"},{"p":"io.sentry.opentelemetry","c":"OtelSentryPropagator","l":"extract(Context, C, TextMapGetter<C>)","u":"extract(io.opentelemetry.context.Context,C,io.opentelemetry.context.propagation.TextMapGetter)"},{"p":"io.sentry.opentelemetry","c":"SentryPropagator","l":"extract(Context, C, TextMapGetter<C>)","u":"extract(io.opentelemetry.context.Context,C,io.opentelemetry.context.propagation.TextMapGetter)"},{"p":"io.sentry.opentelemetry","c":"OpenTelemetryAttributesExtractor","l":"extract(SpanData, IScope, SentryOptions)","u":"extract(io.opentelemetry.sdk.trace.data.SpanData,io.sentry.IScope,io.sentry.SentryOptions)"},{"p":"io.sentry.opentelemetry","c":"OtelSamplingUtil","l":"extractSamplingDecision(Attributes)","u":"extractSamplingDecision(io.opentelemetry.api.common.Attributes)"},{"p":"io.sentry.opentelemetry","c":"SpanDescriptionExtractor","l":"extractSpanInfo(SpanData, IOtelSpanWrapper)","u":"extractSpanInfo(io.opentelemetry.sdk.trace.data.SpanData,io.sentry.opentelemetry.IOtelSpanWrapper)"},{"p":"io.sentry.opentelemetry","c":"OpenTelemetryAttributesExtractor","l":"extractUrl(Attributes, SentryOptions)","u":"extractUrl(io.opentelemetry.api.common.Attributes,io.sentry.SentryOptions)"},{"p":"io.sentry.opentelemetry","c":"OtelSentryPropagator","l":"fields()"},{"p":"io.sentry.opentelemetry","c":"SentryPropagator","l":"fields()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"finish()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"finish(SpanStatus)","u":"finish(io.sentry.SpanStatus)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"finish(SpanStatus, SentryDate)","u":"finish(io.sentry.SpanStatus,io.sentry.SentryDate)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanExporter","l":"flush()"},{"p":"io.sentry.opentelemetry","c":"SentrySamplingResult","l":"getAttributes()"},{"p":"io.sentry.opentelemetry","c":"TraceData","l":"getBaggage()"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"getChildren()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getContexts()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getData()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getData(String)","u":"getData(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"SentrySamplingResult","l":"getDecision()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanInfo","l":"getDescription()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getDescription()"},{"p":"io.sentry.opentelemetry","c":"SentrySampler","l":"getDescription()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getFinishDate()"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"getId()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getMeasurements()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanInfo","l":"getOp()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getOpenTelemetrySpanAttributes()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanContext","l":"getOperation()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getOperation()"},{"p":"io.sentry.opentelemetry","c":"OpenTelemetryLinkErrorEventProcessor","l":"getOrder()"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"getParentNode()"},{"p":"io.sentry.opentelemetry","c":"TraceData","l":"getParentSpanId()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getSamplingDecision()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getScopes()"},{"p":"io.sentry.opentelemetry","c":"SentrySamplingResult","l":"getSentryDecision()"},{"p":"io.sentry.opentelemetry","c":"TraceData","l":"getSentryTraceHeader()"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"getSpan()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getSpanContext()"},{"p":"io.sentry.opentelemetry","c":"TraceData","l":"getSpanId()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getStartDate()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanContext","l":"getStatus()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getStatus()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getTag(String)","u":"getTag(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getTags()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getThrowable()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getTraceId()"},{"p":"io.sentry.opentelemetry","c":"TraceData","l":"getTraceId()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getTransactionName()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanInfo","l":"getTransactionNameSource()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"getTransactionNameSource()"},{"p":"io.sentry.opentelemetry","c":"OtelSentryPropagator","l":"inject(Context, C, TextMapSetter<C>)","u":"inject(io.opentelemetry.context.Context,C,io.opentelemetry.context.propagation.TextMapSetter)"},{"p":"io.sentry.opentelemetry","c":"SentryPropagator","l":"inject(Context, C, TextMapSetter<C>)","u":"inject(io.opentelemetry.context.Context,C,io.opentelemetry.context.propagation.TextMapSetter)"},{"p":"io.sentry.opentelemetry","c":"OtelSentrySpanProcessor","l":"isEndRequired()"},{"p":"io.sentry.opentelemetry","c":"SentrySpanProcessor","l":"isEndRequired()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"isFinished()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"isNoOp()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"isProfileSampled()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"isSampled()"},{"p":"io.sentry.opentelemetry","c":"OtelInternalSpanDetectionUtil","l":"isSentryRequest(IScopes, SpanKind, Attributes)","u":"isSentryRequest(io.sentry.IScopes,io.opentelemetry.api.trace.SpanKind,io.opentelemetry.api.common.Attributes)"},{"p":"io.sentry.opentelemetry","c":"OtelSentrySpanProcessor","l":"isStartRequired()"},{"p":"io.sentry.opentelemetry","c":"SentrySpanProcessor","l":"isStartRequired()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"makeCurrent()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanUtils","l":"maybeTransferOtelAttribute(SpanData, ISpan, AttributeKey<T>)","u":"maybeTransferOtelAttribute(io.opentelemetry.sdk.trace.data.SpanData,io.sentry.ISpan,io.opentelemetry.api.common.AttributeKey)"},{"p":"io.sentry.opentelemetry","c":"OtelSentrySpanProcessor","l":"onEnd(ReadableSpan)","u":"onEnd(io.opentelemetry.sdk.trace.ReadableSpan)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanProcessor","l":"onEnd(ReadableSpan)","u":"onEnd(io.opentelemetry.sdk.trace.ReadableSpan)"},{"p":"io.sentry.opentelemetry","c":"OtelSentrySpanProcessor","l":"onStart(Context, ReadWriteSpan)","u":"onStart(io.opentelemetry.context.Context,io.opentelemetry.sdk.trace.ReadWriteSpan)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanProcessor","l":"onStart(Context, ReadWriteSpan)","u":"onStart(io.opentelemetry.context.Context,io.opentelemetry.sdk.trace.ReadWriteSpan)"},{"p":"io.sentry.opentelemetry","c":"OpenTelemetryAttributesExtractor","l":"OpenTelemetryAttributesExtractor()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OpenTelemetryLinkErrorEventProcessor","l":"OpenTelemetryLinkErrorEventProcessor()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelInternalSpanDetectionUtil","l":"OtelInternalSpanDetectionUtil()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelSamplingUtil","l":"OtelSamplingUtil()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelSentryPropagator","l":"OtelSentryPropagator()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelSentrySpanProcessor","l":"OtelSentrySpanProcessor()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanContext","l":"OtelSpanContext(ReadWriteSpan, TracesSamplingDecision, IOtelSpanWrapper, SpanId, Baggage)","u":"%3Cinit%3E(io.opentelemetry.sdk.trace.ReadWriteSpan,io.sentry.TracesSamplingDecision,io.sentry.opentelemetry.IOtelSpanWrapper,io.sentry.SpanId,io.sentry.Baggage)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanInfo","l":"OtelSpanInfo(String, String, TransactionNameSource)","u":"%3Cinit%3E(java.lang.String,java.lang.String,io.sentry.protocol.TransactionNameSource)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanUtils","l":"OtelSpanUtils()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"OtelSpanWrapper(ReadWriteSpan, IScopes, SentryDate, TracesSamplingDecision, IOtelSpanWrapper, SpanId, Baggage)","u":"%3Cinit%3E(io.opentelemetry.sdk.trace.ReadWriteSpan,io.sentry.IScopes,io.sentry.SentryDate,io.sentry.TracesSamplingDecision,io.sentry.opentelemetry.IOtelSpanWrapper,io.sentry.SpanId,io.sentry.Baggage)"},{"p":"io.sentry.opentelemetry","c":"OpenTelemetryLinkErrorEventProcessor","l":"process(SentryEvent, Hint)","u":"process(io.sentry.SentryEvent,io.sentry.Hint)"},{"p":"io.sentry.opentelemetry","c":"SentryPropagator","l":"SentryPropagator()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"SentrySampler","l":"SentrySampler()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"SentrySampler","l":"SentrySampler(IScopes)","u":"%3Cinit%3E(io.sentry.IScopes)"},{"p":"io.sentry.opentelemetry","c":"SentrySamplingResult","l":"SentrySamplingResult(TracesSamplingDecision)","u":"%3Cinit%3E(io.sentry.TracesSamplingDecision)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanExporter","l":"SentrySpanExporter()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"SentrySpanExporter","l":"SentrySpanExporter(IScopes)","u":"%3Cinit%3E(io.sentry.IScopes)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanProcessor","l":"SentrySpanProcessor()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setContext(String, Object)","u":"setContext(java.lang.String,java.lang.Object)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setData(String, Object)","u":"setData(java.lang.String,java.lang.Object)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setDescription(String)","u":"setDescription(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setMeasurement(String, Number)","u":"setMeasurement(java.lang.String,java.lang.Number)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setMeasurement(String, Number, MeasurementUnit)","u":"setMeasurement(java.lang.String,java.lang.Number,io.sentry.MeasurementUnit)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanContext","l":"setOperation(String)","u":"setOperation(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setOperation(String)","u":"setOperation(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"setParentNode(SpanNode)","u":"setParentNode(io.sentry.opentelemetry.SpanNode)"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"setSpan(SpanData)","u":"setSpan(io.opentelemetry.sdk.trace.data.SpanData)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanContext","l":"setStatus(SpanStatus)","u":"setStatus(io.sentry.SpanStatus)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setStatus(SpanStatus)","u":"setStatus(io.sentry.SpanStatus)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setTag(String, String)","u":"setTag(java.lang.String,java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setThrowable(Throwable)","u":"setThrowable(java.lang.Throwable)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setTransactionName(String)","u":"setTransactionName(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"setTransactionName(String, TransactionNameSource)","u":"setTransactionName(java.lang.String,io.sentry.protocol.TransactionNameSource)"},{"p":"io.sentry.opentelemetry","c":"SentrySampler","l":"shouldSample(Context, String, String, SpanKind, Attributes, List<LinkData>)","u":"shouldSample(io.opentelemetry.context.Context,java.lang.String,java.lang.String,io.opentelemetry.api.trace.SpanKind,io.opentelemetry.api.common.Attributes,java.util.List)"},{"p":"io.sentry.opentelemetry","c":"SentrySpanExporter","l":"shutdown()"},{"p":"io.sentry.opentelemetry","c":"SpanDescriptionExtractor","l":"SpanDescriptionExtractor()","u":"%3Cinit%3E()"},{"p":"io.sentry.opentelemetry","c":"SpanNode","l":"SpanNode(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"startChild(SpanContext, SpanOptions)","u":"startChild(io.sentry.SpanContext,io.sentry.SpanOptions)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"startChild(String)","u":"startChild(java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"startChild(String, String)","u":"startChild(java.lang.String,java.lang.String)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"startChild(String, String, SentryDate, Instrumenter)","u":"startChild(java.lang.String,java.lang.String,io.sentry.SentryDate,io.sentry.Instrumenter)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"startChild(String, String, SentryDate, Instrumenter, SpanOptions)","u":"startChild(java.lang.String,java.lang.String,io.sentry.SentryDate,io.sentry.Instrumenter,io.sentry.SpanOptions)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"startChild(String, String, SpanOptions)","u":"startChild(java.lang.String,java.lang.String,io.sentry.SpanOptions)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"storeInContext(Context)","u":"storeInContext(io.opentelemetry.context.Context)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"toBaggageHeader(List<String>)","u":"toBaggageHeader(java.util.List)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"toSentryTrace()"},{"p":"io.sentry.opentelemetry","c":"SentrySpanExporter","l":"TRACE_ORIGIN"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"traceContext()"},{"p":"io.sentry.opentelemetry","c":"TraceData","l":"TraceData(String, String, String, SentryTraceHeader, Baggage)","u":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,io.sentry.SentryTraceHeader,io.sentry.Baggage)"},{"p":"io.sentry.opentelemetry","c":"OtelSpanWrapper","l":"updateEndDate(SentryDate)","u":"updateEndDate(io.sentry.SentryDate)"}];updateSearchResults();