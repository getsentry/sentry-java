public final class io/sentry/spring/boot/BuildConfig {
	public static final field SENTRY_SPRING_BOOT_SDK_NAME Ljava/lang/String;
	public static final field VERSION_NAME Ljava/lang/String;
}

public class io/sentry/spring/boot/InAppIncludesResolver : org/springframework/context/ApplicationContextAware {
	public fun <init> ()V
	public fun resolveInAppIncludes ()Ljava/util/List;
	public fun setApplicationContext (Lorg/springframework/context/ApplicationContext;)V
}

public class io/sentry/spring/boot/SentryAutoConfiguration {
	public fun <init> ()V
}

public class io/sentry/spring/boot/SentryLogbackAppenderAutoConfiguration {
	public fun <init> ()V
	public fun sentryLogbackInitializer (Lio/sentry/spring/boot/SentryProperties;)Lio/sentry/spring/boot/SentryLogbackInitializer;
}

public class io/sentry/spring/boot/SentryLogbackInitializer : org/springframework/context/event/GenericApplicationListener {
	public fun <init> (Lio/sentry/spring/boot/SentryProperties;)V
	public fun onApplicationEvent (Lorg/springframework/context/ApplicationEvent;)V
	public fun supportsEventType (Lorg/springframework/core/ResolvableType;)Z
}

public class io/sentry/spring/boot/SentryProperties : io/sentry/SentryOptions {
	public fun <init> ()V
	public fun getExceptionResolverOrder ()I
	public fun getGraphql ()Lio/sentry/spring/boot/SentryProperties$Graphql;
	public fun getLogging ()Lio/sentry/spring/boot/SentryProperties$Logging;
	public fun getUserFilterOrder ()Ljava/lang/Integer;
	public fun isUseGitCommitIdAsRelease ()Z
	public fun setExceptionResolverOrder (I)V
	public fun setGraphql (Lio/sentry/spring/boot/SentryProperties$Graphql;)V
	public fun setLogging (Lio/sentry/spring/boot/SentryProperties$Logging;)V
	public fun setUseGitCommitIdAsRelease (Z)V
	public fun setUserFilterOrder (Ljava/lang/Integer;)V
}

public class io/sentry/spring/boot/SentryProperties$Graphql {
	public fun <init> ()V
	public fun getIgnoredErrorTypes ()Ljava/util/List;
	public fun setIgnoredErrorTypes (Ljava/util/List;)V
}

public class io/sentry/spring/boot/SentryProperties$Logging {
	public fun <init> ()V
	public fun getLoggers ()Ljava/util/List;
	public fun getMinimumBreadcrumbLevel ()Lorg/slf4j/event/Level;
	public fun getMinimumEventLevel ()Lorg/slf4j/event/Level;
	public fun isEnabled ()Z
	public fun setEnabled (Z)V
	public fun setLoggers (Ljava/util/List;)V
	public fun setMinimumBreadcrumbLevel (Lorg/slf4j/event/Level;)V
	public fun setMinimumEventLevel (Lorg/slf4j/event/Level;)V
}

public class io/sentry/spring/boot/SentryWebfluxAutoConfiguration {
	public fun <init> ()V
	public fun sentryScheduleHookApplicationRunner ()Lorg/springframework/boot/ApplicationRunner;
	public fun sentryWebExceptionHandler (Lio/sentry/IScopes;)Lio/sentry/spring/webflux/SentryWebExceptionHandler;
	public fun sentryWebFilter (Lio/sentry/IScopes;)Lio/sentry/spring/webflux/SentryWebFilter;
}

public class io/sentry/spring/boot/graphql/SentryGraphqlAutoConfiguration {
	public fun <init> ()V
	public fun exceptionResolverAdapter ()Lio/sentry/spring/graphql/SentryDataFetcherExceptionResolverAdapter;
	public static fun graphqlBeanPostProcessor ()Lio/sentry/spring/graphql/SentryGraphqlBeanPostProcessor;
	public fun sentryInstrumentationWebMvc (Lio/sentry/spring/boot/SentryProperties;Lorg/springframework/beans/factory/ObjectProvider;)Lio/sentry/graphql/SentryInstrumentation;
	public fun sentryInstrumentationWebflux (Lio/sentry/spring/boot/SentryProperties;Lorg/springframework/beans/factory/ObjectProvider;)Lio/sentry/graphql/SentryInstrumentation;
}

